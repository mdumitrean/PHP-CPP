CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(phpcpp)

# Use CMake File with following options
OPTION(PHPCPP_32BIT "If PHP was compiled as 32 bit" OFF)
OPTION(PHPCPP_COMPILE_TS "Set flag if PHP was compiled with thread safe" OFF)
OPTION(PHPCPP_MSVCRT_STATIC "Set flag if you want to compile the MSVC runtime as a static library" OFF)
OPTION(PHPCPP_SHARED "Compile shared libs instead of static libs" OFF)
OPTION(PHP8 "Compile against PHP8" ON)

IF ("${PHPCPP_PHP_PATH}" STREQUAL "")
  MESSAGE(FATAL_ERROR "PHP paths to sources need to be explicitly set. Use 'php-config --includes' to find it.")
ENDIF()

IF (NOT EXISTS "${PHPCPP_PHP_PATH}/main/php.h")
  message(SEND_ERROR "The PHPCPP_PHP_PATH variable does not lead to main/php.h")
ENDIF()

#SET(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_PREFIX}/lib${CMAKE_LIBRARY_ARCHITECTURE}")
SET(CMAKE_INSTALL_INCDIR "${CMAKE_INSTALL_PREFIX}/include/phpcpp")

LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR})

IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
    ADD_DEFINITIONS(-DZEND_DEBUG=1)
ELSE()
    ADD_DEFINITIONS(-DZEND_DEBUG=0)
ENDIF()

IF (PHPCPP_COMPILE_TS)
  ADD_DEFINITIONS(-DZTS)
ENDIF()

IF (PHP8)
  SET(PHPVER "php8")
ELSE()
  SET(PHPVER "php7")
ENDIF()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

ADD_COMPILE_OPTIONS(-Wno-inconsistent-missing-override)

ADD_DEFINITIONS(-D_MSC_STDINT_H_)
ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ADD_DEFINITIONS(-DBUILDING_PHPCPP)
ADD_DEFINITIONS(-DZEND_WIN32_KEEP_INLINE)

IF (MSVC)
  # Should compile MSVC runtime static or dll
  IF (PHPCPP_MSVCRT_STATIC)
    MESSAGE("Compile PHPCPP with static runtime")

    SET(CMAKE_CXX_FLAGS_RELEASE         "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    SET(CMAKE_CXX_FLAGS_DEBUG           "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MT")

  ELSE()
    MESSAGE("Compile PHPCPP with dynamic runtime")

    SET(CMAKE_CXX_FLAGS_RELEASE         "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    SET(CMAKE_CXX_FLAGS_DEBUG           "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MD")

  ENDIF()

  IF (PHPCPP_32BIT)
    ADD_DEFINITIONS(-DPHP_WIN32 -DZEND_WIN32 -D_USE_32BIT_TIME_T)
  ELSE()
    ADD_DEFINITIONS(-DPHP_WIN32 -DZEND_WIN32)
  ENDIF()

  SET(ADDITIONAL_COMPILER_FLAGS "/W3")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ADDITIONAL_COMPILER_FLAGS}")
ENDIF ()

INCLUDE_DIRECTORIES(
  "${PHPCPP_PHP_PATH}/"
  "${PHPCPP_PHP_PATH}/main"
  "${PHPCPP_PHP_PATH}/Zend"
  "${PHPCPP_PHP_PATH}/TSRM"
  "${PHPCPP_PHP_PATH}/ext"
  "${PHPCPP_PHP_PATH}/build/main"
  "${PHPCPP_PHP_PATH}/build/Zend"
)
SET(PHP_LIBS "php")
SET(PHP_LIB_PATH "")

IF (NOT PHPCPP_32BIT)
  SET(PHP_LIB_PATH "x64/")
ENDIF()

IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
  IF (PHPCPP_COMPILE_TS)
    SET(PHP_LIBS      ${PHP_LIBS} "${PHPVER}ts_debug")
    SET(PHP_LIB_PATH  "${PHP_LIB_PATH}Debug_TS")
  ELSE()
    SET(PHP_LIBS      ${PHP_LIBS} "${PHPVER}_debug")
    SET(PHP_LIB_PATH  "${PHP_LIB_PATH}Debug")
  ENDIF()
ELSE()
  IF (PHPCPP_COMPILE_TS)
    SET(PHP_LIBS      ${PHP_LIBS} "${PHPVER}ts")
    SET(PHP_LIB_PATH  "${PHP_LIB_PATH}Release_TS")
  ELSE()
    SET(PHP_LIBS      ${PHP_LIBS} "${PHPVER}")
    SET(PHP_LIB_PATH  "${PHP_LIB_PATH}Release")
  ENDIF()
ENDIF()

FILE(GLOB PHPCPP_COMMON_SOURCES CONFIGURE_DEPENDS common/*.cpp)
FILE(GLOB PHPCPP_COMMON_HEADERS CONFIGURE_DEPENDS common/*.h)
FILE(GLOB PHPCPP_ZEND_SOURCES CONFIGURE_DEPENDS zend/*.cpp)
FILE(GLOB PHPCPP_ZEND_HEADERS CONFIGURE_DEPENDS zend/*.h)
FILE(GLOB PHPCPP_HEADERS_INCLUDE CONFIGURE_DEPENDS include/phpcpp/*.h)

LINK_DIRECTORIES(${PHP_LIB_PATH})

IF (PHPCPP_SHARED)
  ADD_LIBRARY(phpcpp SHARED
    ${PHPCPP_COMMON_HEADERS}
    ${PHPCPP_COMMON_SOURCES}
    ${PHPCPP_HEADERS_INCLUDE}
    ${PHPCPP_ZEND_HEADERS}
    ${PHPCPP_ZEND_SOURCES}
    phpcpp.h
  )
ELSE()
  ADD_LIBRARY(phpcpp STATIC
    ${PHPCPP_COMMON_HEADERS}
    ${PHPCPP_COMMON_SOURCES}
    ${PHPCPP_HEADERS_INCLUDE}
    ${PHPCPP_ZEND_HEADERS}
    ${PHPCPP_ZEND_SOURCES}
    phpcpp.h
  )
ENDIF()

INSTALL(FILES ${PHPCPP_HEADERS_INCLUDE} DESTINATION ${CMAKE_INSTALL_INCDIR})
INSTALL(TARGETS phpcpp)

SET_TARGET_PROPERTIES(phpcpp
  PROPERTIES
  ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
  LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
)
